#!/bin/bash
cd output
c1max=293
c2max=192
c3max=160
c4max=200
c5max=220
get_random_chapter(){
	echo $((1 + $RANDOM % 5))	
	#echo 1
}

get_num_based_on_chapter(){
	if [ $# -eq 1 ]
	then
		if [ $1 == 1 ]
		then
			echo $((1 + $RANDOM % 293))	
		fi

		if [ $1 == 2 ]
		then
			echo $((1 + $RANDOM % 192))	
		fi

		if [ $1 == 3 ]
		then
			echo $((1 + $RANDOM % 160))	
		fi

		if [ $1 == 4 ]
		then
			echo $((1 + $RANDOM % 200))	
		fi

		if [ $1 == 5 ]
		then
			echo $((1 + $RANDOM % 220))	
		fi
	fi
}

randomly_select_question(){
	chapter=$(get_random_chapter)
	question=$(get_num_based_on_chapter $chapter)
	echo "$chapter:$question"
}

# accepts 2 parameters: param1: chapter, param2: question number
get_question_text(){
	#cd output
	c=$1
	q=$2

	if [ $c -eq "1" ]
	then
		search_string="$q"
		qn=$(($q+1))
		starting_line_text=$(grep -w "$q ." chapter_1_questions.txt)
		starting_line_num=$(grep -wnr "$q ." chapter_1_questions.txt)
		print_start=$(echo "$starting_line_num" | awk -F':' '{print $1}') 
		ending_line_text=$(grep -w "$qn ." chapter_1_questions.txt)
		ending_line_num=$(grep -wnr "$qn ." chapter_1_questions.txt)
		if [ $q -eq $c1max ]
		then
			ending_line_num_tmp=$(wc -l < chapter_1_questions.txt | bc)
			ending_line_num=$((ending_line_num_tmp+1))
		fi
		print_end=$(echo "$ending_line_num" | awk -F':' '{print $1}')
		echo "=================== Chapter 1 ===============================" > tmp.question
		for n in $(seq $print_start $((print_end-1)))
		do
			echo $( head -n $n chapter_1_questions.txt | tail -1 ) >> tmp.question
		done
	fi

	if [ $c -eq "2" ]
	then

		search_string="$q"
		qn=$(($q+1))
		starting_line_text=$(grep -w "$q ." chapter_2_questions.txt)
		starting_line_num=$(grep -wnr "$q ." chapter_2_questions.txt)
		print_start=$(echo "$starting_line_num" | awk -F':' '{print $1}') 
		ending_line_text=$(grep -w "$qn ." chapter_2_questions.txt)
		ending_line_num=$(grep -wnr "$qn ." chapter_2_questions.txt)
		if [ $q -eq $c2max ]
		then
			ending_line_num_tmp=$(wc -l < chapter_2_questions.txt | bc)
			ending_line_num=$((ending_line_num_tmp+1))
		fi
		print_end=$(echo "$ending_line_num" | awk -F':' '{print $1}')
		echo "=================== Chapter 2 ===============================" > tmp.question
		for n in $(seq $print_start $((print_end-1)))
		do
			echo $( head -n $n chapter_2_questions.txt | tail -1 ) >> tmp.question
		done
	fi

	if [ $c -eq "3" ]
	then
		search_string="$q"
		qn=$(($q+1))
		starting_line_text=$(grep -w "$q ." chapter_3_questions.txt)
		starting_line_num=$(grep -wnr "$q ." chapter_3_questions.txt)
		print_start=$(echo "$starting_line_num" | awk -F':' '{print $1}') 
		ending_line_text=$(grep -w "$qn ." chapter_3_questions.txt)
		ending_line_num=$(grep -wnr "$qn ." chapter_3_questions.txt)
		if [ $q -eq $c3max ]
		then
			ending_line_num_tmp=$(wc -l < chapter_3_questions.txt | bc)
			ending_line_num=$((ending_line_num_tmp+1))
		fi
		print_end=$(echo "$ending_line_num" | awk -F':' '{print $1}')
		echo "=================== Chapter 3 ===============================" > tmp.question
		for n in $(seq $print_start $((print_end-1)))
		do
			echo $( head -n $n chapter_3_questions.txt | tail -1 ) >> tmp.question
		done
	fi

	if [ $c -eq "4" ]
	then

		search_string="$q"
		qn=$(($q+1))
		starting_line_text=$(grep -w "$q ." chapter_4_questions.txt)
		starting_line_num=$(grep -wnr "$q ." chapter_4_questions.txt)
		print_start=$(echo "$starting_line_num" | awk -F':' '{print $1}') 
		ending_line_text=$(grep -w "$qn ." chapter_4_questions.txt)
		ending_line_num=$(grep -wnr "$qn ." chapter_4_questions.txt)
		if [ $q -eq $c4max ]
		then
			ending_line_num_tmp=$(wc -l < chapter_4_questions.txt | bc)
			ending_line_num=$((ending_line_num_tmp+1))
		fi
		print_end=$(echo "$ending_line_num" | awk -F':' '{print $1}')
		echo "=================== Chapter 4 ===============================" > tmp.question
		for n in $(seq $print_start $((print_end-1)))
		do
			echo $( head -n $n chapter_4_questions.txt | tail -1 ) >> tmp.question
		done
	fi

	if [ $c -eq "5" ]
	then

		search_string="$q"
		qn=$(($q+1))
		starting_line_text=$(grep -w "$q ." chapter_5_questions.txt)
		starting_line_num=$(grep -wnr "$q ." chapter_5_questions.txt)
		print_start=$(echo "$starting_line_num" | awk -F':' '{print $1}') 
		ending_line_text=$(grep -w "$qn ." chapter_5_questions.txt)
		ending_line_num=$(grep -wnr "$qn ." chapter_5_questions.txt)
		if [ $q -eq $c5max ]
		then
			ending_line_num_tmp=$(wc -l < chapter_5_questions.txt | bc)
			ending_line_num=$((ending_line_num_tmp+1))
		fi
		print_end=$(echo "$ending_line_num" | awk -F':' '{print $1}')
		echo "=================== Chapter 5 ===============================" > tmp.question
		for n in $(seq $print_start $((print_end-1)))
		do
			echo $( head -n $n chapter_5_questions.txt | tail -1 ) >> tmp.question
		done
	fi

}

#for n in $(seq 1 $c1max)
#do	
#	echo ""
#	get_question_text 1 $n
#done

function get_correct_answer(){
	#echo "[debug] get_correct_answer called with $# paramters: $1 $2"
	c=$1
	q=$2

	if [ $c -eq 1 ]
	then
		file=chapter_1_answer_key.txt
		result_line=$(grep -w "$q" $file)
		echo "$result_line"
	fi
	if [ $c -eq 2 ]
	then
		file=chapter_2_answer_key.txt	
		result_line=$(grep -w "$q" $file)
		echo "$result_line"
	fi
	if [ $c -eq 3 ]
	then
		file=chapter_3_answer_key.txt	
		result_line=$(grep -w "$q" $file)
		echo "$result_line"
	fi
	
	if [ $c -eq 4 ]
	then
		file=chapter_4_answer_key.txt	
		result_line=$(grep -w "$q" $file)
		echo "$result_line"
	fi

	if [ $c -eq 5 ]
	then
		file=chapter_5_answer_key.txt	
		result_line=$(grep -w "$q" $file)
		echo "$result_line"
	fi
}


function new_question(){
	c=$(get_random_chapter)
	q=$(get_num_based_on_chapter $c)
	cq_ans_str=$(get_correct_answer $c $q)
	qans=$(echo $cq_ans_str | awk -F':' '{print $2}')
	#echo "[debug] new_question() called. Chapter: $c Question: $q Answer: $qans"
	get_question_text $c $q
	q_text_length=$(wc -l < tmp.question)
	#echo "question text length is: $q_text_length"
	for n in $(seq 1 $q_text_length)
	do
		echo $( head -n $n tmp.question | tail -1 )
	done
	echo "=============================================================="
	read -p "Please select an answer: " user_answer
	selection=${user_answer^^}
	#echo "$selection"
	#echo "The correct answer is: $qans"
	#if [[ "$selection" == "$qans" ]]
	#then
		#echo "That is correct."
	#fi

	
	if [[ "$selection" != "$qans" ]]
	then
		#echo "That is incorrect."
		#echo "The correct answer was: $qans"
		echo "$c.$q." >> tmp.incorrect_questions
	fi
	sleep 1
	clear
}

#get_correct_answer 1 1
function start_quiz(){
	echo "" > tmp.incorrect_questions
	clear
	read -p "How many questions would you like to do today?(default: 25) :" total_questions
	clear
	if [[ $total_questions == "" ]]
	then
		total_questions=25
		echo "Defaulting to: $total_questions questions."
	fi
	

	for n in $(seq 1 $total_questions)
	do	
		echo "Question #$n of $total_questions:"
		new_question
	done
	total_incorrect_questions_file_length=$(wc -l < tmp.incorrect_questions)
	incorrect_questions_total=$(($total_incorrect_questions_file_length-1))
	echo "Results: of $total_questions, $incorrect_questions_total were wrong."
	#pct_correct=$(echo "scale=2 ; $incorrect_questions_total / $total_questions" | bc)
	#echo "Therefore, you scored %$pct_correct."
	echo "Please review the following questions:"
	q_text_length=$(wc -l < tmp.incorrect_questions)
	for n in $(seq 1 $q_text_length)
	do
		echo $( head -n $n tmp.incorrect_questions | tail -1 )
	done
}
start_quiz
#for n in $(seq 1 $c1max)
#do	
#	get_correct_answer 1 $n
#done
